[{"path":"https://dzvoti.github.io/effectivenessCalculations/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 effectivenessCalculations authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dzvoti.github.io/effectivenessCalculations/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Liberty Mlambo. Author, maintainer. Katherine Adam. Author, contributor. Andy Bean. Author, contributor. Louise E. Ander. Author, contributor. Micronutrient Action Policy Support (MAPS) Project. Copyright holder, funder.","code":""},{"path":"https://dzvoti.github.io/effectivenessCalculations/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mlambo L, Adam K, Bean , Ander L (2024). effectivenessCalculations: Micronutrient Action Policy Support Tool Effectiveness Calculations. R package version 1.3.0, https://dzvoti.github.io/effectivenessCalculations/.","code":"@Manual{,   title = {effectivenessCalculations: Micronutrient Action Policy Support Tool Effectiveness Calculations},   author = {Liberty Mlambo and Katherine Adam and Andy Bean and Louise E. Ander},   year = {2024},   note = {R package version 1.3.0},   url = {https://dzvoti.github.io/effectivenessCalculations/}, }"},{"path":"https://dzvoti.github.io/effectivenessCalculations/index.html","id":"effectivenesscalculations","dir":"","previous_headings":"","what":"Micronutrient Action Policy Support Tool Effectiveness Calculations","title":"Micronutrient Action Policy Support Tool Effectiveness Calculations","text":"goal effectivenessCalculations provide functions calculating various metrics related nutritional effectiveness, baseline inadequacy household reach food vehicles.","code":""},{"path":"https://dzvoti.github.io/effectivenessCalculations/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Micronutrient Action Policy Support Tool Effectiveness Calculations","text":"can install development version effectivenessCalculations GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"dzvoti/effectivenessCalculations\")"},{"path":[]},{"path":"https://dzvoti.github.io/effectivenessCalculations/index.html","id":"calculate-pre-and-post-fortification-intake-supplies-fortification-vehicle-reach-and-inadequacy-summaries","dir":"","previous_headings":"Basic Examples","what":"Calculate pre and post fortification intake supplies, fortification vehicle reach and Inadequacy Summaries","title":"Micronutrient Action Policy Support Tool Effectiveness Calculations","text":"calculate pre post fortification intake supplies, fortification vehicle reach Inadequacy Summaries. function calculate_pre_and_post_fortification_summaries calculates pre post fortification intake supplies, fortification vehicle reach Inadequacy Summaries chosen fortification method metric.","code":"calculate_pre_and_post_fortification_summaries(     householdConsumptionDf = householdConsumption,     householdDetailsDf = householdDetails,     nctListDf = nctList,     intakeThresholdsDf = intakeThresholds,     aggregationGroup = c(\"admin0Name\", \"admin1Name\"),     fortifiableFoodItemsDf = createFortifiableFoodItemsTable(),     foodVehicleName = \"wheat flour\",     fortificationLevelsDf = fortificationLevels,     years = c(2021:2024),     MNList = c(\"A\", \"Ca\"),     metric = \"AFE\",     method = \"LSFF\" )"},{"path":"https://dzvoti.github.io/effectivenessCalculations/index.html","id":"deprecated-examples","dir":"","previous_headings":"","what":"Deprecated Examples","title":"Micronutrient Action Policy Support Tool Effectiveness Calculations","text":"examples deprecated removed future versions package. Please use new functions .","code":"library(effectivenessCalculations)  calculate_pre_and_post_lsff_summaries_afe(     householdConsumptionDf = householdConsumption,     householdDetailsDf = householdDetails,     nctListDf = nctList,     intakeThresholdsDf = intakeThresholds,     aggregationGroup = c(\"admin0Name\", \"admin1Name\"),     fortifiableFoodItemsDf = createFortifiableFoodItemsTable(),     foodVehicleName = \"wheat flour\",     fortificationLevels = fortificationLevels,     years = c(2021:2024),     MNList = c(\"A\") ) calculate_pre_and_post_lsff_summaries_cnd(   householdConsumptionDf = householdConsumption,   householdDetailsDf = householdDetails,   nctListDf = nctList,   intakeThresholdsDf = intakeThresholds,   aggregationGroup = c(\"admin0Name\", \"admin1Name\"),   fortifiableFoodItemsDf = createFortifiableFoodItemsTable(),   foodVehicleName = \"wheat flour\",   fortificationLevelsDf = fortificationLevels,   years = c(2021:2024),   MNList = c(\"A\") )"},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/calculate_pre_and_post_fortification_summaries.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Pre and Post Fortification Summaries — calculate_pre_and_post_fortification_summaries","title":"Calculate Pre and Post Fortification Summaries — calculate_pre_and_post_fortification_summaries","text":"function calculates summaries nutrient inadequacy different fortification methods different administrative groups using either Adult Female Equivalent (AFE) Method, Critical Nutrient Density (CND) Method, .","code":""},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/calculate_pre_and_post_fortification_summaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Pre and Post Fortification Summaries — calculate_pre_and_post_fortification_summaries","text":"","code":"calculate_pre_and_post_fortification_summaries(   householdConsumptionDf = householdConsumption,   householdDetailsDf = householdDetails,   nctListDf = nctList,   intakeThresholdsDf = intakeThresholds,   aggregationGroup = c(\"admin0Name\", \"admin1Name\"),   fortifiableFoodItemsDf = fortifiableFoodItem,   foodVehicleName = \"wheat flour\",   fortificationLevelsDf = fortificationLevels,   years = c(2021:2024),   MNList = \"A\",   metric = \"afe\",   method = \"LSFF\" )"},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/calculate_pre_and_post_fortification_summaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Pre and Post Fortification Summaries — calculate_pre_and_post_fortification_summaries","text":"householdConsumptionDf dataframe containing household consumption data. Must contain columns: \"householdId\", \"amountConsumedInG\". householdDetailsDf dataframe containing household details. Must contain columns: \"householdId\", \"memberCount\". nctListDf dataframe containing nutrient composition tables. Must contain column: \"nutrient\". intakeThresholdsDf dataframe containing intake thresholds nutrients. Must contain columns: \"nutrient\", \"CND\", \"CUL\". aggregationGroup character vector administrative groups aggregate data. Must empty. Defaults c(\"admin0Name\", \"admin1Name\"). fortifiableFoodItemsDf dataframe containing fortifiable food items.`. foodVehicleName character string specifying name food vehicle fortification. Defaults \"wheat flour\". fortificationLevelsDf dataframe containing fortification levels different nutrients years. years numeric vector specifying years LSFF analyzed. Defaults 2021:2024. MNList character vector nutrients included analysis. Defaults \"\". Must empty. metric character string specifying method used analysis. Must one \"AFE\", \"CND\", \"\". Defaults \"AFE\". method character string specifying fortification method used analysis. Must one \"LSFF\", \"BIO\", \"FERT\". Defaults \"LSFF\".","code":""},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/calculate_pre_and_post_fortification_summaries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Pre and Post Fortification Summaries — calculate_pre_and_post_fortification_summaries","text":"dataframe containing summaries nutrient inadequacy fortification different administrative groups.","code":""},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/calculate_pre_and_post_fortification_summaries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Pre and Post Fortification Summaries — calculate_pre_and_post_fortification_summaries","text":"","code":"if (FALSE) { # \\dontrun{ calculate_pre_and_post_fortification_summaries(     householdConsumptionDf = householdConsumption,     householdDetailsDf = householdDetails,     nctListDf = nctList,     intakeThresholdsDf = intakeThresholds,     aggregationGroup = c(\"admin0Name\", \"admin1Name\"),     fortifiableFoodItemsDf = createFortifiableFoodItemsTable(),     foodVehicleName = \"wheat flour\",     fortificationLevelsDf = fortificationLevels,     years = c(2021:2024),     MNList = c(\"A\", \"Ca\"),     metric = \"AFE\",     method = \"LSFF\" ) } # }"},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/calculate_pre_and_post_lsff_summaries_afe.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Pre and Post LSFF Nutrient Summaries — calculate_pre_and_post_lsff_summaries_afe","title":"Calculate Pre and Post LSFF Nutrient Summaries — calculate_pre_and_post_lsff_summaries_afe","text":"function calculates summaries nutrient inadequacy large-scale food fortification (LSFF) different administrative groups using Adult Female Equivalent (AFE) Method.","code":""},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/calculate_pre_and_post_lsff_summaries_afe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Pre and Post LSFF Nutrient Summaries — calculate_pre_and_post_lsff_summaries_afe","text":"","code":"calculate_pre_and_post_lsff_summaries_afe(   householdConsumptionDf = householdConsumption,   householdDetailsDf = householdDetails,   nctListDf = nctList,   intakeThresholdsDf = intakeThresholds,   aggregationGroup = c(\"admin0Name\", \"admin1Name\"),   fortifiableFoodItemsDf = createFortifiableFoodItemsTable(),   foodVehicleName = \"wheat flour\",   fortificationLevelsDf = fortificationLevels,   years = c(2021:2024),   MNList = \"A\" )"},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/calculate_pre_and_post_lsff_summaries_afe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Pre and Post LSFF Nutrient Summaries — calculate_pre_and_post_lsff_summaries_afe","text":"householdConsumptionDf dataframe containing household consumption data. Must contain columns: \"householdId\", \"amountConsumedInG\". householdDetailsDf dataframe containing household details. Must contain columns: \"householdId\", \"memberCount\",\"afeFactor\". nctListDf dataframe containing nutrient composition tables. Must contain column: \"nutrient\". intakeThresholdsDf dataframe containing intake thresholds nutrients. Must contain columns: \"nutrient\", \"ear\", \"ul\". aggregationGroup character vector administrative groups aggregate data. Must empty. Defaults c(\"admin0Name\", \"admin1Name\"). fortifiableFoodItemsDf dataframe containing fortifiable food items. Generated using function createFortifiableFoodItemsTable(). foodVehicleName character string specifying name food vehicle fortification. Defaults \"wheat flour\". fortificationLevelsDf dataframe containing average fortification levels different nutrients years. years numeric vector specifying years LSFF analyzed. Defaults 2021:2024. MNList character vector nutrients included analysis. Defaults \"\". Must empty.","code":""},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/calculate_pre_and_post_lsff_summaries_afe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Pre and Post LSFF Nutrient Summaries — calculate_pre_and_post_lsff_summaries_afe","text":"dataframe summaries nutrient inadequacy specified administrative groups LSFF.","code":""},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/calculate_pre_and_post_lsff_summaries_afe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Pre and Post LSFF Nutrient Summaries — calculate_pre_and_post_lsff_summaries_afe","text":"","code":"if (FALSE) { # \\dontrun{ calculate_pre_and_post_lsff_summaries_afe(     householdConsumptionDf = householdConsumption,     householdDetailsDf = householdDetails,     nctListDf = nctList,     intakeThresholdsDf = intakeThresholds,     aggregationGroup = c(\"admin0Name\", \"admin1Name\"),     fortifiableFoodItemsDf = createFortifiableFoodItemsTable(),     foodVehicleName = \"wheat flour\",     fortificationLevels = fortificationLevels,     years = c(2021:2024),     MNList = c(\"A\", \"Ca\") ) } # }"},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/calculate_pre_and_post_lsff_summaries_cnd.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Pre and Post LSFF Nutrient Summaries with CND method — calculate_pre_and_post_lsff_summaries_cnd","title":"Calculate Pre and Post LSFF Nutrient Summaries with CND method — calculate_pre_and_post_lsff_summaries_cnd","text":"function calculates summaries nutrient inadequacy large-scale food fortification (LSFF) different administrative groups using Critical Nutrient Density (CND) Method.","code":""},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/calculate_pre_and_post_lsff_summaries_cnd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Pre and Post LSFF Nutrient Summaries with CND method — calculate_pre_and_post_lsff_summaries_cnd","text":"","code":"calculate_pre_and_post_lsff_summaries_cnd(   householdConsumptionDf = householdConsumption,   householdDetailsDf = householdDetails,   nctListDf = nctList,   intakeThresholdsDf = intakeThresholds,   aggregationGroup = c(\"admin0Name\", \"admin1Name\"),   fortifiableFoodItemsDf = createFortifiableFoodItemsTable(),   foodVehicleName = \"wheat flour\",   fortificationLevelsDf = fortificationLevels,   years = c(2021:2024),   MNList = \"A\" )"},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/calculate_pre_and_post_lsff_summaries_cnd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Pre and Post LSFF Nutrient Summaries with CND method — calculate_pre_and_post_lsff_summaries_cnd","text":"householdConsumptionDf dataframe containing household consumption data. Must contain columns: \"householdId\", \"amountConsumedInG\". householdDetailsDf dataframe containing household details. Must contain columns: \"householdId\", \"memberCount\". nctListDf dataframe containing nutrient composition tables. Must contain column: \"nutrient\". intakeThresholdsDf dataframe containing intake thresholds nutrients. Must contain columns: \"nutrient\", \"CND\", \"CUL\". aggregationGroup character vector administrative groups aggregate data. Must empty. Defaults c(\"admin0Name\", \"admin1Name\"). fortifiableFoodItemsDf dataframe containing fortifiable food items. Generated using function createFortifiableFoodItemsTable(). foodVehicleName character string specifying name food vehicle fortification. Defaults \"wheat flour\". fortificationLevelsDf dataframe containing fortification levels different nutrients years. years numeric vector specifying years LSFF analyzed. Defaults 2021:2024. MNList character vector nutrients included analysis. Defaults \"\". Must empty.","code":""},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/calculate_pre_and_post_lsff_summaries_cnd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Pre and Post LSFF Nutrient Summaries with CND method — calculate_pre_and_post_lsff_summaries_cnd","text":"dataframe summaries nutrient inadequacy specified administrative groups LSFF.","code":""},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/calculate_pre_and_post_lsff_summaries_cnd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Pre and Post LSFF Nutrient Summaries with CND method — calculate_pre_and_post_lsff_summaries_cnd","text":"","code":"if (FALSE) { # \\dontrun{ calculate_pre_and_post_lsff_summaries_cnd(     householdConsumptionDf = householdConsumption,     householdDetailsDf = householdDetails,     nctListDf = nctList,     intakeThresholdsDf = intakeThresholds,     aggregationGroup = c(\"admin0Name\", \"admin1Name\"),     fortifiableFoodItemsDf = createFortifiableFoodItemsTable(),     foodVehicleName = \"wheat flour\",     fortificationLevelsDf = fortificationLevels,     years = c(2021:2024),     MNList = c(\"A\", \"Ca\") ) } # }"},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/createFortifiableFoodItemsTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Fortifiable Food Items Table — createFortifiableFoodItemsTable","title":"Create Fortifiable Food Items Table — createFortifiableFoodItemsTable","text":"function loads food group, food genus, food vehicle data Excel sheets, processes data identify fortifiable food groups items, returns table fortifiable food items associated vehicle IDs fortifiable portions.","code":""},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/createFortifiableFoodItemsTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Fortifiable Food Items Table — createFortifiableFoodItemsTable","text":"","code":"createFortifiableFoodItemsTable(   food_file = \"data/sd123/food group genus vehicle data.xlsx\",   food_groups_sheet = \"food_group\",   food_genus_sheet = \"food_genus\",   food_vehicle_sheet = \"food_vehicle\" )"},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/createFortifiableFoodItemsTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Fortifiable Food Items Table — createFortifiableFoodItemsTable","text":"data frame containing fortifiable food items respective vehicle IDs fortifiable portions.","code":""},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/createFortifiableFoodItemsTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Fortifiable Food Items Table — createFortifiableFoodItemsTable","text":"","code":"if (FALSE) { # \\dontrun{ fortifiable_food_items <- createFortifiableFoodItemsTable() } # }"},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/createMasterNct.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a master NCT (Nutrient Composition Table) — createMasterNct","title":"Create a master NCT (Nutrient Composition Table) — createMasterNct","text":"function creates master NCT list NCTs MAPS Tool. selects specified columns NCT list reshapes data long wide format.","code":""},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/createMasterNct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a master NCT (Nutrient Composition Table) — createMasterNct","text":"","code":"createMasterNct(   nctList,   fctListIdCol = \"fctListId\",   foodGenusIdCol = \"foodGenusId\",   micronutrientIdCol = \"micronutrientId\",   micronutrientCompositionCol = \"micronutrientComposition\" )"},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/createMasterNct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a master NCT (Nutrient Composition Table) — createMasterNct","text":"nctList list NCTs. fctListIdCol string specifying column name FCT list ID. Default \"fctListId\". foodGenusIdCol string specifying column name food genus ID. Default \"foodGenusId\". micronutrientIdCol string specifying column name micronutrient ID. Default \"micronutrientId\". micronutrientCompositionCol string specifying column name micronutrient composition. Default \"micronutrientComposition\".","code":""},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/createMasterNct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a master NCT (Nutrient Composition Table) — createMasterNct","text":"data frame representing master NCT. row corresponds food item, column corresponds micronutrient.","code":""},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/createMasterNct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a master NCT (Nutrient Composition Table) — createMasterNct","text":"","code":"if (FALSE) { # \\dontrun{ createMasterNct(nctList) } # }"},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/getMnThresholdUnits.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Micronutrient Thresholds Units — getMnThresholdUnits","title":"Get Micronutrient Thresholds Units — getMnThresholdUnits","text":"function retrieves thresholds specified micronutrient dataframe intake thresholds.","code":""},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/getMnThresholdUnits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Micronutrient Thresholds Units — getMnThresholdUnits","text":"","code":"getMnThresholdUnits(intakeThresholds, nutrient, param = \"unitAdequacy\")"},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/getMnThresholdUnits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Micronutrient Thresholds Units — getMnThresholdUnits","text":"intakeThresholds dataframe containing intake thresholds various micronutrients. param string specifying parameter retrieve.Default \"unitAdequacy\". Mn string specifying micronutrient retrieve thresholds .","code":""},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/getMnThresholdUnits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Micronutrient Thresholds Units — getMnThresholdUnits","text":"list containing thresholds units specified micronutrient.","code":""},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/getMnThresholdUnits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Micronutrient Thresholds Units — getMnThresholdUnits","text":"","code":"if (FALSE) { # \\dontrun{ intakeThresholds <- data.frame(     nutrient = c(\"vitaminA\", \"vitaminB\", \"vitaminC\"),     ear = c(0.5, 0.6, 0.7), ul = c(1, 1.2, 1.3), unitAdequacy = c(0.8, 0.9, 1) ) thresholds <- getMnThresholdUnits(intakeThresholds, \"vitaminA\", \"unitAdequacy\") } # }"},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/getMnThresholds.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Micronutrient Thresholds — getMnThresholds","title":"Get Micronutrient Thresholds — getMnThresholds","text":"function retrieves thresholds specified micronutrient dataframe intake thresholds.","code":""},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/getMnThresholds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Micronutrient Thresholds — getMnThresholds","text":"","code":"getMnThresholds(intakeThresholds, nutrient, param = \"ear\")"},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/getMnThresholds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Micronutrient Thresholds — getMnThresholds","text":"intakeThresholds dataframe containing intake thresholds various micronutrients. param string specifying parameter retrieve. Can \"ear\", \"ul\", \"unitAdequacy\". Default \"ear\". Mn string specifying micronutrient retrieve thresholds .","code":""},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/getMnThresholds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Micronutrient Thresholds — getMnThresholds","text":"list containing thresholds specified micronutrient. param \"ul\" \"unitAdequacy\", single value returned.","code":""},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/getMnThresholds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Micronutrient Thresholds — getMnThresholds","text":"","code":"if (FALSE) { # \\dontrun{ intakeThresholds <- data.frame(     nutrient = c(\"vitaminA\", \"vitaminB\", \"vitaminC\"),     ear = c(0.5, 0.6, 0.7), ul = c(1, 1.2, 1.3), unitAdequacy = c(0.8, 0.9, 1) ) thresholds <- getMnThresholds(intakeThresholds, \"vitaminA\", \"ul\") } # }"},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/load_rda_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Load RDA Files from a Directory — load_rda_files","title":"Load RDA Files from a Directory — load_rda_files","text":"function lists .rda files specified directory loads global environment.","code":""},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/load_rda_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load RDA Files from a Directory — load_rda_files","text":"","code":"load_rda_files(dir = \"data/sd123\")"},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/load_rda_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load RDA Files from a Directory — load_rda_files","text":"dir character string specifying directory load .rda files. Defaults \"data/sd123\".","code":""},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/load_rda_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load RDA Files from a Directory — load_rda_files","text":"function return value. loads .rda files global environment.","code":""},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/load_rda_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load RDA Files from a Directory — load_rda_files","text":"","code":"if (FALSE) { # \\dontrun{ # Load .rda files from the default directory load_rda_files()  # Load .rda files from a custom directory load_rda_files(\"your/custom/path\") } # }"},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/yearAverageFortificationLevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Year Average Fortification Level — yearAverageFortificationLevel","title":"Year Average Fortification Level — yearAverageFortificationLevel","text":"function loads average fortification levels CSV file located data directory, returns average fortification level specific year micronutrient.","code":""},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/yearAverageFortificationLevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Year Average Fortification Level — yearAverageFortificationLevel","text":"","code":"yearAverageFortificationLevel(   fortification_vehicle,   Year,   MN,   fortificationLevels )"},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/yearAverageFortificationLevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Year Average Fortification Level — yearAverageFortificationLevel","text":"fortification_vehicle string specifying fortification vehicle. Year integer specifying year. MN string specifying micronutrient. fortificationLevels dataframe containing average fortification levels.","code":""},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/yearAverageFortificationLevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Year Average Fortification Level — yearAverageFortificationLevel","text":"numeric value representing average fortification level specified year micronutrient.","code":""},{"path":"https://dzvoti.github.io/effectivenessCalculations/reference/yearAverageFortificationLevel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Year Average Fortification Level — yearAverageFortificationLevel","text":"","code":"if (FALSE) { # \\dontrun{ avgFortificationLevel <- yearAverageFortificationLevel(\"wheat flour\", 2024, \"A\") } # }"}]
